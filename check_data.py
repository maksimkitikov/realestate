#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import pandas as pd
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_URL = os.getenv("DATABASE_URL", "")
if not DB_URL:
    print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
    exit(1)

engine = create_engine(DB_URL, pool_pre_ping=True)

def check_table(table_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        query = f"SELECT COUNT(*) as count FROM {table_name}"
        with engine.connect() as conn:
            result = conn.execute(text(query))
            count = result.fetchone()[0]
        print(f"‚úì {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        return count
    except Exception as e:
        print(f"‚ùå {table_name}: –æ—à–∏–±–∫–∞ - {e}")
        return 0

def check_view(view_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã"""
    try:
        query = f"SELECT COUNT(*) as count FROM {view_name}"
        with engine.connect() as conn:
            result = conn.execute(text(query))
            count = result.fetchone()[0]
        print(f"‚úì {view_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        if count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample_query = f"SELECT * FROM {view_name} ORDER BY 1 DESC LIMIT 3"
            df = pd.read_sql(sample_query, engine)
            print(f"  –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(df.to_string(index=False))
            print()
        
        return count
    except Exception as e:
        print(f"‚ùå {view_name}: –æ—à–∏–±–∫–∞ - {e}")
        return 0

def check_data():
    engine = create_engine(os.getenv('DATABASE_URL'))
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        result = conn.execute(text("""
            SELECT source, metric, freq, COUNT(*) 
            FROM fact_metric 
            WHERE source IN ('FRED','BLS_LAUS','BEA','CENSUS_ACS') 
            GROUP BY source, metric, freq 
            ORDER BY source, metric
        """))
        print("Data sources summary:")
        for row in result:
            print(f"  {row}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è FRED
        result = conn.execute(text("""
            SELECT metric, value, date 
            FROM fact_metric 
            WHERE source = 'FRED' 
            AND date = (SELECT MAX(date) FROM fact_metric WHERE source = 'FRED')
            ORDER BY metric
        """))
        print("\nLatest FRED values:")
        for row in result:
            print(f"  {row}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç–∞—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        result = conn.execute(text("""
            SELECT COUNT(DISTINCT geo_key) as states_count
            FROM fact_metric 
            WHERE geo_level = 'STATE'
        """))
        print(f"\nStates with data: {result.fetchone()[0]}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ staging —Ç–∞–±–ª–∏—Ü
    print("\nüìä Staging —Ç–∞–±–ª–∏—Ü—ã:")
    staging_tables = [
        "stg_fred_series",
        "stg_bls_cpi", 
        "stg_census_acs",
        "stg_hud_fmr",
        "stg_hud_chas",
        "stg_bea_gdp"
    ]
    
    for table in staging_tables:
        check_table(table)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DWH —Ç–∞–±–ª–∏—Ü
    print("\nüèóÔ∏è DWH —Ç–∞–±–ª–∏—Ü—ã:")
    dwh_tables = [
        "dwh_dim_date",
        "dwh_dim_series",
        "dwh_fact_mortgage_rates",
        "dwh_fact_cpi",
        "dwh_fact_unemployment"
    ]
    
    for table in dwh_tables:
        check_table(table)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ç—Ä–∏–Ω
    print("\nüìà –í–∏—Ç—Ä–∏–Ω—ã Power BI:")
    views = [
        "vw_pbi_mortgage_rates",
        "vw_pbi_cpi",
        "vw_pbi_unemployment", 
        "vw_pbi_rent_fmr",
        "vw_pbi_affordability_hint",
        "vw_pbi_acs_rent_value"
    ]
    
    for view in views:
        check_view(view)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1 as test"))
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT schema_name FROM information_schema.schemata"))
            schemas = [row[0] for row in result]
        print(f"‚úì –°—Ö–µ–º—ã –≤ –ë–î: {', '.join(schemas)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
