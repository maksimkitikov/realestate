#!/usr/bin/env python3
"""
–û—Ñ–ª–∞–π–Ω-—Ç–µ—Å—Ç—ã –¥–ª—è Real Estate Analytics Pipeline
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∏ –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
"""

import os
import sys
import pandas as pd
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_env_keys_present() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π –≤ .env"""
    assert os.path.isfile(".env"), ".env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
    
    required_keys = [
        "FRED_API_KEY", "HUD_API_KEY", "BEA_API_KEY", 
        "BLS_API_KEY", "CENSUS_API_KEY", "DATABASE_URL"
    ]
    
    for key in required_keys:
        assert key in content, f"{key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env"
    
    print("‚úì –í—Å–µ API –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .env")

def test_numeric_coercion() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —á–∏—Å–µ–ª
    test_data = [
        {"value": "3.50"},      # –û–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ
        {"value": "NaN"},       # NaN
        {"value": "."},         # –¢–æ—á–∫–∞
        {"value": None},        # None
        {"value": "1,234.56"},  # –° –∑–∞–ø—è—Ç—ã–º–∏
        {"value": ""},          # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        {"value": "abc"}        # –¢–µ–∫—Å—Ç
    ]
    
    df = pd.DataFrame(test_data)
    # –û—á–∏—â–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º (–∫–∞–∫ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ)
    df["clean_value"] = df["value"].astype(str).str.replace(",", "")
    df["numeric_value"] = pd.to_numeric(df["clean_value"], errors="coerce")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å
    valid_count = df["numeric_value"].notna().sum()
    invalid_count = df["numeric_value"].isna().sum()
    
    assert valid_count == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∏—Å–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ {valid_count}"
    assert invalid_count == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {invalid_count}"
    
    print("‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_census_parse_like() -> None:
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Census ACS"""
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Census (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    rows = [
        ["B25064_001E", "B25077_001E", "NAME", "us"],
        ["1500", "350000", "United States", "1"]
    ]
    
    header, data = rows[0], rows[1]
    cols = {name: idx for idx, name in enumerate(header)}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
    assert cols["B25064_001E"] == 0, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è B25064_001E"
    assert cols["B25077_001E"] == 1, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è B25077_001E"
    assert cols["NAME"] == 2, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è NAME"
    assert cols["us"] == 3, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è us"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    assert data[0] == "1500", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–Ω—Ç—ã"
    assert data[1] == "350000", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–ª—å—è"
    assert data[3] == "1", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ us"
    
    print("‚úì –ü–∞—Ä—Å–∏–Ω–≥ Census ACS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_database_connection() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    try:
        engine = create_engine(db_url, pool_pre_ping=True)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1 as test"))
            assert result.fetchone()[0] == 1, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def test_schema_validation() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ö–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ schema.sql —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    with open("schema.sql", "r", encoding="utf-8") as f:
        schema_content = f.read()
    
    required_elements = [
        "create schema if not exists stg",
        "create schema if not exists dwh",
        "create table if not exists stg_fred_series",
        "create table if not exists dwh_dim_date",
        "create table if not exists dwh_dim_series",
        "create or replace view vw_pbi_mortgage_rates",
        "create or replace view vw_pbi_cpi",
        "create or replace view vw_pbi_unemployment"
    ]
    
    for element in required_elements:
        assert element in schema_content, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {element}"
    
    print("‚úì –°—Ö–µ–º–∞ –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

def test_pipeline_imports() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ run_pipeline.py"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        import pandas
        import requests
        import sqlalchemy
        import tenacity
        from dotenv import load_dotenv
        
        print("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        sys.exit(1)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –æ—Ñ–ª–∞–π–Ω-—Ç–µ—Å—Ç–æ–≤...")
    
    try:
        test_env_keys_present()
        test_numeric_coercion()
        test_census_parse_like()
        test_database_connection()
        test_schema_validation()
        test_pipeline_imports()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
