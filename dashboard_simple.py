#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Real Estate Analytics Dashboard
"""

import os
import pandas as pd
import plotly.graph_objects as go
from sqlalchemy import create_engine
from dotenv import load_dotenv
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_URL = os.getenv("DATABASE_URL", "")
engine = create_engine(DB_URL, pool_pre_ping=True)

def get_mortgage_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–ø–æ—Ç–µ—á–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º"""
    try:
        query = """
        SELECT date, mortgage_rate 
        FROM vw_pbi_mortgage_rates 
        WHERE date >= '2020-01-01' AND mortgage_rate IS NOT NULL
        ORDER BY date
        LIMIT 100
        """
        df = pd.read_sql(query, engine)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

# –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = dash.Dash(__name__, title="Real Estate Analytics Dashboard")

app.layout = html.Div([
    html.H1("üè† Real Estate Analytics Dashboard", 
            style={'textAlign': 'center', 'color': '#2c3e50', 'marginBottom': 30}),
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏–ø–æ—Ç–µ—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    html.Div([
        html.H3("üìà –ò–ø–æ—Ç–µ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (30Y Fixed)", 
                style={'textAlign': 'center', 'color': '#34495e'}),
        dcc.Graph(id='mortgage-chart')
    ]),
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    html.Button('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', id='update-button', n_clicks=0),
    
    # –°—Ç–∞—Ç—É—Å
    html.Div(id='status')
])

@app.callback(
    [Output('mortgage-chart', 'figure'),
     Output('status', 'children')],
    [Input('update-button', 'n_clicks')]
)
def update_chart(n_clicks):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df = get_mortgage_data()
        
        if df.empty:
            fig = go.Figure()
            fig.update_layout(
                title="–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                template="plotly_white",
                height=400
            )
            status = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        else:
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=df['date'], 
                y=df['mortgage_rate'],
                mode='lines',
                name='30Y Fixed Rate',
                line=dict(color='#3498db', width=2)
            ))
            fig.update_layout(
                title="–ò–ø–æ—Ç–µ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–°—Ç–∞–≤–∫–∞ (%)",
                template="plotly_white",
                height=400
            )
            status = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π"
        
        return fig, status
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        empty_fig = go.Figure()
        empty_fig.update_layout(
            title="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            template="plotly_white",
            height=400
        )
        return empty_fig, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Real Estate Analytics Dashboard...")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8052 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    app.run_server(debug=True, host='0.0.0.0', port=8052)
